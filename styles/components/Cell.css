.cell-container {
  margin: 0;

  @media (max-width: 599px) {
    margin-bottom: 0;
    margin-right: 0;
  }
}

.editing-caption,
.grow-wrap::after {
  width: 100%;
  padding: 0;

  /* Textarea clear formatting */
  border: none;
  overflow: hidden;
  outline: none;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  resize: none;

  /* font and layout */
  font-family: var(--fonts);
  color: var(--black);
  font-size: 19px;
  line-height: 1;
  overflow-wrap: break-word;
  background: var(--white);

  outline: none !important;
  box-shadow: 0 0 40px var(--pinkWhite);
}

.editing-caption:focus {
  box-shadow: 0 0 40px var(--pink);
}

/* https://css-tricks.com/the-cleanest-trick-for-autogrowing-textareas/ */
.grow-wrap {
  /* easy way to plop the elements on top of each other and have them both sized based on the tallest one's height */
  display: grid;
}
.grow-wrap::after {
  /* Note the weird space! Needed to preventy jumpy behavior */
  content: attr(data-caption) " ";

  /* This is how textarea text behaves */
  white-space: pre-wrap;

  /* Hidden from view, clicks, and screen readers */
  visibility: hidden;
}
.grow-wrap > textarea {
  /* You could leave this, but after a user resizes, then it ruins the auto sizing */
  resize: none;

  /* Firefox shows scrollbar on growth, you can hide like this. */
  overflow: hidden;
}
.grow-wrap > textarea,
.grow-wrap::after {
  /* Place on top of each other */
  grid-area: 1 / 1 / 2 / 2;
}

.caption-padding {
  padding: 0.3rem;
}

.caption-edit-buttons {
  position: absolute;
  width: 100%;
  z-index: var(--toptop);
  background-color: var(--lightGray);
}
